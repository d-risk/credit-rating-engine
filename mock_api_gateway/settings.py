"""
Django settings for mock_api_gateway project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import ipaddress
import logging
import os
from logging import Logger
from typing import List, Dict, Any

import requests
from django.utils.crypto import get_random_string
from requests import Response


def log_level() -> int:
    return os.getenv('APP_LOG_LEVEL', logging.INFO)


def secret_key() -> str:
    return os.getenv('APP_SECRET_KEY', get_random_string(length=50))


def allowed_hosts(logger: Logger = logging.getLogger(__name__)) -> List[str]:
    hosts = [
        '.d-risk.tech',
        'localhost',
        '127.0.0.1',
    ]
    add_aws_ecs_private_ip(hosts)
    logger.info(f"ALLOWED_HOSTS={ALLOWED_HOSTS}")
    return hosts


def add_aws_ecs_private_ip(hosts: List[str], logger: Logger = logging.getLogger(__name__)):
    try:
        response: Response = requests.get('http://169.254.169.254/latest/meta-data/local-ipv4', timeout=0.01)
        if response.status_code == 200:
            ip: str = response.text
            try:
                ipaddress.ip_address(ip)
                hosts.append(ip)
            except ValueError as error:
                logger.warning(f"'{ip}' is not a proper IPv4 address:{error}")
    except requests.exceptions.RequestException as error:
        logger.warning(f"Unable to get AWS ECS local private IPv4: {error}")


logging.basicConfig(level=log_level())

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR: str = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG: bool = True

ALLOWED_HOSTS: List[str] = allowed_hosts()

# Application definition

INSTALLED_APPS: List[str] = [
    # Graphene Django
    'graphene_django',

    'corsheaders',

    'mock_api_gateway.common',
    'mock_api_gateway.company',
    'mock_api_gateway.financial_report',
    'mock_api_gateway.news',
    'mock_api_gateway.risk_rating',
    'mock_api_gateway.risk_report',
]

MIDDLEWARE: List[str] = [
    'corsheaders.middleware.CorsMiddleware',
]

# CORS
CORS_ORIGIN_REGEX_WHITELIST = [
    r'^(https?://)?([\w-]+\.)?d-risk\.tech',
]

ROOT_URLCONF: str = 'mock_api_gateway.urls'

TEMPLATES: List[Dict[str, Any]] = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [],
        },
    },
]

WSGI_APPLICATION: str = 'mock_api_gateway.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES: Dict[str, Dict[str, str]] = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS: List[Dict[str, str]] = []

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE: str = 'en-us'

TIME_ZONE: str = 'UTC'

USE_I18N: bool = True

USE_L10N: bool = True

USE_TZ: bool = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL: str = '/static/'

# Graphene
GRAPHENE: Dict[str, str] = {
    'SCHEMA': 'mock_api_gateway.schema.schema',
}
